This challenge is part of a [ MyCodeSchool
](http://www.youtube.com/mycodeschool) tutorial track and is accompanied by a
[ video lesson ](http://www.youtube.com/embed/vcQIFT79_50?theme=light) .

* * *

If you're new to _ linked lists _ , this is a great exercise for learning
about them. Given a pointer to the _ head _ node of a linked list, print its
elements in order, one element per line. If the head pointer is null
(indicating the list is empty), don%u2019t print anything.

** Input Format **

The ` void Print(Node* head) ` method takes the head node of a linked list as
a parameter. Each struct _ Node _ has a _ data _ field (which stores integer
data) and a _ next _ field (which points to the next element in the list).

** Note: ** Do not read any input from stdin/console. Each test case calls the _ Print _ method individually and passes it the head of a list. 

** Output Format **

Print the integer data for each element of the linked list to stdout/console
(e.g.: using _ printf _ , _ cout _ , etc.). There should be one element per
line.

** Sample Input **

This example uses the following two linked lists:

    
    
    NULL  
    1->2->3->NULL
    

and  are the two head nodes passed as arguments to ` Print(Node* head) ` .

** Note: ** In linked list diagrams, ` -> ` describes a pointer to the _ next _ node in the list. 

** Sample Output **
    
    
    1
    2
    3
    

** Explanation **

_ Test Case 0: ` NULL ` _ . An empty list is passed to the method, so nothing
is printed.  
_ Test Case 1: ` 1->2->3->NULL ` _ . This is a non-empty list so we loop
through each element, printing each element's data field on its own line.

