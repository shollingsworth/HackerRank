A valid email address meets the following criteria:

  * It's composed of a _ username _ , _ domain _ name, and _ extension _ assembled in this format: ` username@domain.extension `
  * The _ username _ starts with an _ English alphabetical character _ , and any subsequent characters consist of one or more of the following: [ alphanumeric characters ](https://en.wikipedia.org/wiki/Alphanumeric) , ` - ` , ` . ` , and ` _ ` . 
  * The _ domain _ and _ extension _ contain only [ English alphabetical characters ](https://en.wikipedia.org/wiki/English_alphabet) . 
  * The _ extension _ is  ,  , or  characters in length. 

Given  pairs of names and email addresses as input, print each name and email
address pair having a _ valid _ email address on a new line.

** Hint: ** Try using [ Email.utils() ](https://docs.python.org/2/library/email.util.html#module-email.utils) to complete this challenge. For example, this code: 
    
    
    import email.utils
    print email.utils.parseaddr('DOSHI <DOSHI@hackerrank.com>')
    print email.utils.formataddr(('DOSHI', 'DOSHI@hackerrank.com'))
    

produces this output:

    
    
    ('DOSHI', 'DOSHI@hackerrank.com')
    DOSHI <DOSHI@hackerrank.com>
    

** Input Format **

The first line contains a single integer,  , denoting the number of email
address.  
Each line  of the  subsequent lines contains a _ name _ and an _ email address
_ as two space-separated values following this format:

    
    
    name <user@email.com>
    

** Constraints **

  * 

** Output Format **

Print the space-separated name and email address pairs containing _ valid _
email addresses only. Each pair must be printed on a new line in the following
format:

    
    
    name <user@email.com>
    

You must print each valid email address in the same order as it was received
as input.

** Sample Input **
    
    
    2  
    DEXTER <dexter@hotmail.com>
    VIRUS <virus!@variable.:p>
    

** Sample Output **
    
    
    DEXTER <dexter@hotmail.com>
    

** Explanation **

_ dexter@hotmail.com _ is a valid email address, so we print the name and
email address pair received as input on a new line.  
_ virus!@variable.:p _ is not a valid email address because the username
contains an exclamation point ( ` ! ` ) and the extension contains a colon ( `
: ` ). As this email is not valid, we print nothing.

