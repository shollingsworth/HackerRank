  * Create a list,  , of  empty sequences, where each sequence is indexed from  to  . The elements within each of the  sequences also use  -indexing. 
  * Create an integer,  , and initialize it to  . 
  * The  types of queries that can be performed on your list of sequences (  ) are described below: 
    1. Query: ` 1 x y `
      1. Find the sequence,  , at index  in  . 
      2. Append integer  to sequence  . 
    2. Query: ` 2 x y `
      1. Find the sequence,  , at index  in  . 
      2. Find the value of element  in  (where  is the size of  ) and assign it to  . 
      3. Print the new value of  on a new line 

** Task **   
Given  ,  , and  queries, execute each query.

** Note: ** is the _ bitwise XOR _ operation, which corresponds to the ` ^ ` operator in most languages. Learn more about it on [ Wikipedia ](https://en.wikipedia.org/wiki/Exclusive_or) . 

** Input Format **

The first line contains two space-separated integers,  (the number of
sequences) and  (the number of queries), respectively.  
Each of the  subsequent lines contains a query in the format defined above.

** Constraints **

  *   *   *   * It is guaranteed that query type  will never query an empty sequence or index. 

** Output Format **

For each type  query, print the updated value of  on a new line.

** Sample Input **
    
    
    2 5
    1 0 5
    1 1 7
    1 0 3
    2 1 0
    2 1 1
    

** Sample Output **
    
    
    7
    3
    

** Explanation **

_ Initial Values: _  
  
  
= [ ]  
= [ ]

_ Query 0: _ Append  to sequence  .  
  
= [5]  
= [ ]

_ Query 1: _ Append  to sequence  .  
= [5]  
= [7]

_ Query 2: _ Append  to sequence  .  
  
= [5, 3]  
= [7]

_ Query 3: _ Assign the value at index  of sequence  to  , print  .  
  
= [5, 3]  
= [7]

    
    
    7
    

_ Query 4: _ Assign the value at index  of sequence  to  , print  .  
  
= [5, 3]  
= [7]

    
    
    3
    

